{"version":3,"sources":["components/Button.jsx","components/Input.jsx","components/ClearButton.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Button","props","className","val","children","isNaN","onClick","handleClick","Input","input","ClearButton","handleClear","App","concatenation","setState","state","handleEqual","math","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+TAMeA,G,YAAO,SAAAC,GAAK,OACzB,yBACEC,UAAS,4BALIC,EAMEF,EAAMG,SALbC,MAAMF,IAAc,MAANA,GAAmB,MAANA,EAKG,WAAL,OAEjCG,QAAS,kBAAIL,EAAMM,YAAYN,EAAMG,YAEpCH,EAAMG,UAVM,IAAAD,ICAJK,G,MAAM,SAAAP,GAAK,OACpB,yBAAKC,UAAU,SAAUD,EAAMQ,SCDtBC,G,MAAY,SAACT,GAAD,OACrB,yBAAKC,UAAU,YACfI,QAASL,EAAMU,aACVV,EAAMG,Y,eC4DAQ,E,kDA3DX,WAAYX,GAAO,IAAD,8BAChB,cAAMA,IAKRY,cAAe,SAAAV,GACb,EAAKW,SAAS,CACZL,MAAO,EAAKM,MAAMN,MAAQN,KARZ,EAYlBa,YAAY,WACV,EAAKF,SAAS,CAACL,MAAMQ,KAAWA,IAAc,EAAKF,MAAMN,OAAO,OAXhE,EAAKM,MAAM,CACTN,MAAM,KAHQ,E,qDAgBT,IAAD,OACN,OAEE,yBAAKP,UAAU,cACf,yBAAKA,UAAU,kBACf,kBAAC,EAAD,CAAOO,MAAOS,KAAKH,MAAMN,QACvB,yBAAKP,UAAU,OACb,kBAAC,EAAD,CAAQK,YAAaW,KAAKL,eAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaW,KAAKL,eAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaW,KAAKL,eAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaW,KAAKL,eAA1B,MAEF,yBAAKX,UAAU,OACb,kBAAC,EAAD,CAAQK,YAAaW,KAAKL,eAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaW,KAAKL,eAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaW,KAAKL,eAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaW,KAAKL,eAA1B,MAEF,yBAAKX,UAAU,OACb,kBAAC,EAAD,CAAQK,YAAaW,KAAKL,eAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaW,KAAKL,eAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaW,KAAKL,eAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaW,KAAKL,eAA1B,MAEF,yBAAKX,UAAU,OACb,kBAAC,EAAD,CAAQK,YAAaW,KAAKL,eAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaW,KAAKL,eAA1B,KACA,kBAAC,EAAD,CAAQN,YAAa,kBAAI,EAAKS,gBAA9B,KACA,kBAAC,EAAD,CAAQT,YAAaW,KAAKL,eAA1B,MAEF,yBAAKX,UAAU,OACb,kBAAC,EAAD,CAAaS,YAAa,kBAAK,EAAKG,SAAS,CAACL,MAAM,OAApD,gB,GAhDMU,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a2c8544d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css';\r\n\r\nconst isOperator=val=>{\r\n    return !isNaN(val) || val===\".\" || val===\"=\";\r\n  }\r\n  export const Button=props=>(\r\n  <div \r\n    className={`button-container ${\r\n        isOperator(props.children) ? null:\"operator\"\r\n    }`}\r\n    onClick={()=>props.handleClick(props.children)}\r\n    >\r\n    {props.children}\r\n    </div>\r\n);  \r\n\r\n","import React from \"react\";\r\nimport './Input.css';\r\n\r\nexport const Input=props=>(\r\n    <div className=\"input\" >{props.input}</div>\r\n);","import React from \"react\";\r\nimport \"./ClearButton.css\";\r\n\r\nexport const ClearButton=(props)=>(\r\n    <div className=\"clear-btn\" \r\n    onClick={props.handleClear}>\r\n        {props.children}\r\n    </div>\r\n)","import React, {Component} from 'react';\nimport './App.css';\nimport {Button} from './components/Button';\nimport {Input} from './components/Input';\nimport {ClearButton} from \"./components/ClearButton\";\nimport * as math from \"mathjs\";\nclass App extends Component{\n    constructor(props){\n      super(props);\n      this.state={\n        input:\" \"\n      };\n    }\n    concatenation= val =>{\n      this.setState({\n        input: this.state.input + val\n      });\n    }\n\n    handleEqual=()=>{\n      this.setState({input:math.round(math.evaluate(this.state.input),10)});\n    }\n    \n    render(){\n      return(\n      \n        <div className=\"calculator\">\n        <div className=\"calc-container\">\n        <Input input={this.state.input} />\n          <div className=\"row\">\n            <Button handleClick={this.concatenation}>7</Button>\n            <Button handleClick={this.concatenation}>8</Button>\n            <Button handleClick={this.concatenation}>9</Button>\n            <Button handleClick={this.concatenation}>/</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.concatenation}>4</Button>\n            <Button handleClick={this.concatenation}>5</Button>\n            <Button handleClick={this.concatenation}>6</Button>\n            <Button handleClick={this.concatenation}>*</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.concatenation}>1</Button>\n            <Button handleClick={this.concatenation}>2</Button>\n            <Button handleClick={this.concatenation}>3</Button>\n            <Button handleClick={this.concatenation}>+</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.concatenation}>.</Button>\n            <Button handleClick={this.concatenation}>0</Button>\n            <Button handleClick={()=>this.handleEqual()}>=</Button>\n            <Button handleClick={this.concatenation}>-</Button>\n          </div>\n          <div className=\"row\">\n            <ClearButton handleClear={() =>this.setState({input:\"\"})}>Clear</ClearButton>\n        </div>\n        </div>\n    </div>\n      \n      );\n\n      \n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}